{
  "author": {
    "name": "PushOk Software",
    "email": "support@pushok.com"
  },
  "name": "tungus",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/sergeyksv/tungus.git"
  },
  "contributors": [
    {
      "name": "Sergey Korotkov",
      "email": "sergeyksv@gmail.com"
    }
  ],
  "description": "Mongoose driver for TingoDB embedded database",
  "homepage": "http://www.tingodb.com",
  "keywords": [
    "database",
    "datastore",
    "embedded",
    "mongoose",
    "tingodb"
  ],
  "main": "./index.js",
  "engines": {
    "node": ">= v0.8.x"
  },
  "dependencies": {
    "safe": ">=0.0.9",
    "lodash": "",
    "mkdirp": "",
    "tingodb": ""
  },
  "scripts": {
    "test": "mocha ./test/*.test.js"
  },
  "devDependencies": {
    "mongoose": "3.6.11",
    "mocha": ""
  },
  "readme": "Tungus\n======\n\nThis module implements mongoose.js driver API and allows to use mongoose with TingoDB (http://www.tingodb.com)\nTingoDB is embedded Node.js database that is compatible with MongoDB on API level.\n\nSo far this module is on its early stage with only basic functionality.\n\nTo use this module you have to install both tungus and mongoose.\n\n\tnpm install tungus\n\tnpm install mongoose\n\nThen in your code you should include once tungus module prior to include of mongoose.\nThis rewrites global.MONGOOSE_DRIVER_PATH variable to point it to tungus.\n\n\trequire('tungus')\n\trequire('mongoose')\n\nNext to that you can keep using mongoose as usual except now it will accept different connection string:\n\n\tmongoose.connect('tingodb:///some/local/folder')\n  \nFull example:\n\n\tvar tungus = require('tungus');\n\tvar mongoose = require('mongoose')\n\tvar Schema = mongoose.Schema;\n\n\tconsole.log('Running mongoose version %s', mongoose.version);\n\n\t/**\n\t * Console schema\n\t */\n\n\tvar consoleSchema = Schema({\n\t\tname: String\n\t  , manufacturer: String\n\t  , released: Date\n\t})\n\tvar Console = mongoose.model('Console', consoleSchema);\n\n\t/**\n\t * Game schema\n\t */\n\n\tvar gameSchema = Schema({\n\t\tname: String\n\t  , developer: String\n\t  , released: Date\n\t  , consoles: [{ type: Schema.Types.ObjectId, ref: 'Console' }]\n\t})\n\tvar Game = mongoose.model('Game', gameSchema);\n\n\t/**\n\t * Connect to the console database on localhost with\n\t * the default port (27017)\n\t */\n\n\tmongoose.connect('tingodb://'+__dirname+'/data', function (err) {\n\t  // if we failed to connect, abort\n\t  if (err) throw err;\n\n\t  // we connected ok\n\t  createData();\n\t})\n\n\t/**\n\t * Data generation\n\t */\n\n\tfunction createData () {\n\t  Console.create({\n\t\t  name: 'Nintendo 64'\n\t\t, manufacturer: 'Nintendo'\n\t\t, released: 'September 29, 1996'\n\t  }, function (err, nintendo64) {\n\t\tif (err) return done(err);\n\n\t\tGame.create({\n\t\t\tname: 'Legend of Zelda: Ocarina of Time'\n\t\t  , developer: 'Nintendo'\n\t\t  , released: new Date('November 21, 1998')\n\t\t  , consoles: [nintendo64]\n\t\t}, function (err) {\n\t\t  if (err) return done(err);\n\t\t  example();\n\t\t})\n\t  })\n\t}\n\n\t/**\n\t * Population\n\t */\n\n\tfunction example () {\n\t  Game\n\t  .findOne({ name: /^Legend of Zelda/ })\n\t  .populate('consoles')\n\t  .exec(function (err, ocinara) {\n\t\tif (err) return done(err);\n\t\tconsole.log(ocinara);\n\n\t\tconsole.log(\n\t\t\t'\"%s\" was released for the %s on %s'\n\t\t  , ocinara.name\n\t\t  , ocinara.consoles[0].name\n\t\t  , ocinara.released.toLocaleDateString());\n\n\t\tdone();\n\t  })\n\t}\n\n\tfunction done (err) {\n\t  if (err) console.error(err);\n\t  Console.remove(function () {\n\t\tGame.remove(function () {\n\t\t  mongoose.disconnect();\n\t\t})\n\t  })\n\t}\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sergeyksv/tungus/issues"
  },
  "_id": "tungus@0.0.2",
  "dist": {
    "shasum": "aa6273b87eaf08d2a90e6324e849a055b094f369"
  },
  "_from": "tungus@0.0.2",
  "_resolved": "https://registry.npmjs.org/tungus/-/tungus-0.0.2.tgz"
}
